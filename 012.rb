=begin
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?  
=end

=begin
def get_factors(number)
  arr = Array.new
  a = 1
  while a<=(number/a)
    if (number%a == 0)
      arr.push(a)
      arr.push(number/a)
    end
    a+=1
  end 

  return arr.uniq.sort
end

t1 = Time.now
divisors = Array.new
number = 1
triangle_number = 1

while divisors.length < 500
  number += 1
  triangle_number = (1..number).inject(:+)
  divisors = get_factors(triangle_number)
  puts "#{triangle_number} : #{divisors}"
end

puts "#{triangle_number} with #{divisors.length} in #{Time.now-t1}s"
=end

require 'prime'

def triangle(n)
  case
  when n == 1 then 1
  else n*(n+1)/2
  end
end

def divisors_number(n)
  case n
  when 1 then 1
  else n.prime_division.map{|f| f[1]+1 }.inject(:*)
  end
end

p (1..1.0/0).lazy.map{|n| triangle(n)}.select{|n| divisors_number(n) > 500}.take(1).force

